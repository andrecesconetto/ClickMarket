@page "/vitrine"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveAuto
@attribute [Authorize]

<PageTitle>Vitrine</PageTitle>

<h1 class="mb-4">Produtos</h1>

@if (loading)
{
    <p>Carregando...</p>
}
else if (error != null)
{
    <div class="alert alert-danger">@error</div>
}
else if (products?.Any() != true)
{
    <p>Nenhum produto encontrado.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var p in products!)
        {
            <div class="col">
                <div class="card h-100">
                    @if (!string.IsNullOrWhiteSpace(p.Imagem))
                    {
                        <img src="@($"{imageBase + p.Imagem}")" class="card-img-top" alt="@p.Nome" />
                    }
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@p.Nome</h5>
                        <p class="card-text">@p.Descricao</p>
                        <strong class="mt-auto">@p.Valor.ToString("C")</strong>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private IEnumerable<ClickMarket.Blazor.Client.Models.ProdutoDto> products;
    private bool loading;
    private string error;
    // Base address do backend j√° configurado no HttpClient
    [Inject] private NavigationManager Nav { get; set; } = default!;
    private string imageBase = string.Empty;

    [Inject] private HttpClient Http { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        imageBase = Http.BaseAddress!.ToString().TrimEnd('/') + "/images/upload/";
        try
        {
            products = await Http.GetFromJsonAsync<IEnumerable<ClickMarket.Blazor.Client.Models.ProdutoDto>>("api/produtos");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }
}
