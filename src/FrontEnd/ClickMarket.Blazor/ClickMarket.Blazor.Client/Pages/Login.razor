@page "/login"
@rendermode InteractiveAuto

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Email</label>
        <InputText class="form-control" @bind-Value="loginModel.Email" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Senha</label>
        <InputText type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button class="btn btn-primary" type="submit" disabled="@loading">Entrar</button>
</EditForm>

@if (!string.IsNullOrWhiteSpace(error))
{
    <div class="alert alert-danger mt-3">@error</div>
}

@code {
    private ClickMarket.Blazor.Client.Models.UserLoginViewModel loginModel = new();
    private bool loading;
    private string error;

    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private NavigationManager Nav { get; set; } = default!;
    [Inject] private IJSRuntime JS { get; set; } = default!;

    private async Task HandleLogin()
    {
        loading = true;
        error = null;
        try
        {
            var response = await Http.PostAsJsonAsync("api/conta/login", loginModel);
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("localStorage.setItem", "authToken", token.Trim('"'));
                await JS.InvokeVoidAsync("localStorage.setItem", "userEmail", loginModel.Email);

                Nav.NavigateTo("/vitrine");
            }
            else
            {
                error = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }
}
