@page "/favoritos"
@rendermode InteractiveAuto

@using ClickMarket.Blazor.Client.Models
@using System.Net.Http.Headers

<PageTitle>Favoritos</PageTitle>

<h1 class="mb-4">Meus Favoritos</h1>

@if (redirecting)
{
    <p>Redirecionando...</p>
}
else if (loading)
{
    <p>Carregando...</p>
}
else if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}
else if (favoritos?.Any() != true)
{
    <p>Você ainda não possui produtos favoritos.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var f in favoritos!)
        {
            var p = f.Produto;
            <div class="col">
                <div class="card h-100">
                    @if (!string.IsNullOrWhiteSpace(p?.Imagem))
                    {
                        <img src="@($"{imageBase}{p.Imagem}")" class="card-img-top" alt="@p?.Nome" />
                    }
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@p?.Nome</h5>
                        <p class="card-text">@p?.Descricao</p>
                        <strong class="mt-auto">@p?.Valor.ToString("C")</strong>
                        <button class="btn btn-outline-danger mt-2" @onclick="() => RemoverFavorito(f.Id)">Remover</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private IEnumerable<FavoritoDto>? favoritos;
    private bool loading;
    private bool redirecting;
    private string? error;
    private string imageBase = string.Empty;

    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private IJSRuntime JS { get; set; } = default!;
    [Inject] private NavigationManager Nav { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // Verifica token
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrWhiteSpace(token))
        {
            redirecting = true;
            Nav.NavigateTo("/login");
            return;
        }

        // Configura header Authorization
        if (!Http.DefaultRequestHeaders.Contains("Authorization"))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }

        imageBase = Http.BaseAddress!.ToString().TrimEnd('/') + "/images/upload/";
        loading = true;
        try
        {
            favoritos = await Http.GetFromJsonAsync<IEnumerable<FavoritoDto>>("api/clientes/favoritos");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private async Task RemoverFavorito(Guid favoritoId)
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrWhiteSpace(token))
        {
            Nav.NavigateTo("/login");
            return;
        }
        var request = new HttpRequestMessage(HttpMethod.Delete, $"api/clientes/favoritos/{favoritoId}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        try
        {
            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                favoritos = favoritos?.Where(f => f.Id != favoritoId).ToList();
                StateHasChanged();
            }
            else
            {
                error = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}
