@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JS

@inject ProdutoService ProdutoService

<PageTitle>Home</PageTitle>

<h1>Produtos em destaque</h1>

@if (produtos == null)
{
    <p><em>Carregando produtos...</em></p>
}
else if (!produtos.Any())
{
    <p>Nenhum produto encontrado.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var p in produtos)
        {
            <ProdutoComponent produto="p" 
                SalvarNaListaCallBack="async (value) => { await SalvarNaLista(value); }"
                RemoverDaListaCallBack="async (value) => { await RemoverDaLista(value); }">
            </ProdutoComponent>
        }
    </div>
}


@code {

    private Guid id;
    private List<ProdutoViewModel> produtos;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            produtos = await ProdutoService.ObterProdutos();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao carregar produtos: {ex.Message}");
            produtos = new List<ProdutoViewModel>();
        }
    }

    private async Task SalvarNaLista(Guid produtoId)
    {
        produtos = await ProdutoService.ObterProdutos();
    }

    private async Task RemoverDaLista(Guid produtoId)
    {        
        produtos = await ProdutoService.ObterProdutos();
    }
}
