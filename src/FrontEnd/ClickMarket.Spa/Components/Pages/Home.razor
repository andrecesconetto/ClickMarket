@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JS

@inject ProdutoService ProdutoService
@inject CategoriaService CategoriaService

<PageTitle>Home</PageTitle>

<h1>Produtos em destaque</h1>

    <!-- Seleção de Categorias -->
    <select class="form-select-sm mb-4" @onchange="async e => await SelecionarCategoria(e)">
        <option value="">Todas as categorias</option>
        @if (categorias != null)
        {
            @foreach (var cat in categorias)
            {
                <option value="@cat.Id.ToString()">@cat.Nome</option>
            }
        }
    </select>

@if (produtos == null)
{
    <p><em>Carregando produtos...</em></p>
}
else if (!produtos.Any())
{
    <p>Nenhum produto encontrado.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var p in produtos)
        {
            <ProdutoComponent @key="p.Id" produto="p"
                SalvarNaListaCallBack="async (value) => { await SalvarNaLista(value); }"
                RemoverDaListaCallBack="async (value) => { await RemoverDaLista(value); }">
            </ProdutoComponent>
        }
    </div>
}


@code {

    private Guid id;
    private List<ProdutoViewModel> produtos;
    private List<CategoriaViewModel> categorias;
    private Guid? categoriaSelecionadaId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categorias = await CategoriaService.Listar();
            
            produtos = await ProdutoService.ObterProdutos();            
            
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao carregar produtos: {ex.Message}");
            produtos = new List<ProdutoViewModel>();
        }
    }

    private async Task SalvarNaLista(Guid produtoId)
    {
        produtos = categoriaSelecionadaId.HasValue
        ? await ProdutoService.ObterProdutosPorCategoria(categoriaSelecionadaId.Value)
        : await ProdutoService.ObterProdutos();
    }

    private async Task RemoverDaLista(Guid produtoId)
    {        
        produtos = categoriaSelecionadaId.HasValue
        ? await ProdutoService.ObterProdutosPorCategoria(categoriaSelecionadaId.Value)
        : await ProdutoService.ObterProdutos();
    }

    private async Task SelecionarCategoria(ChangeEventArgs e)
    {
       
        if (Guid.TryParse(e.Value?.ToString(), out var categoriaId))
        {
            categoriaSelecionadaId = categoriaId;
            produtos = await ProdutoService.ObterProdutosPorCategoria(categoriaId);
            
        }
        else
        {
            categoriaSelecionadaId = null;
            produtos = await ProdutoService.ObterProdutos();
        }

        StateHasChanged();
        
    }   

    
}
