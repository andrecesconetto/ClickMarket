@page "/minha-lista"
@attribute [Authorize()]
@rendermode InteractiveServer
@inject ProdutoService ProdutoService
@inject IJSRuntime JS

<PageTitle>Meus produtos favoritos</PageTitle>

<h1>Lista de produtos favoritos</h1>

@if (produtos == null)
{
    <p><em>Carregando produtos...</em></p>
}
else if (!produtos.Any())
{
    <p>Nenhum produto encontrado.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var p in produtos)
        {
            <ProdutoComponent produto="p" 
                RemoverDaListaCallBack="async (value) => { await RemoverDaLista(value); }">
            </ProdutoComponent>
        }
    </div>
}

@code {

    private List<ProdutoViewModel> produtos;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            produtos = await ProdutoService.ObterProdutosFavoritos();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao carregar produtos: {ex.Message}");
            produtos = new List<ProdutoViewModel>();
        }
    }

    private async Task RemoverDaLista(Guid produtoId)
    {
        produtos = await ProdutoService.ObterProdutosFavoritos();
    }
}