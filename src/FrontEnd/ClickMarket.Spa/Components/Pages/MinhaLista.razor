@page "/minha-lista"
@attribute [Authorize()]
@rendermode InteractiveServer
@inject ProdutoService ProdutoService
@inject IJSRuntime JS

<PageTitle>Meus produtos favoritos</PageTitle>

<h1>Lista de produtos favoritos</h1>

@if (produtos == null)
{
    <p><em>Carregando produtos...</em></p>
}
else if (!produtos.Any())
{
    <p>Nenhum produto encontrado.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var p in produtos)
        {
            <div class="col">
                <div class="card h-100">
                    <img class="card-img-top" src="@ObterImagemUrl(p.Imagem)" alt="@p.Nome" style="height:200px; object-fit:contain;" />
                    <div class="card-body">
                        <h5 class="card-title">@p.Nome</h5>
                        <p class="card-text text-truncate">@p.Descricao</p>
                    </div>
                    <div class="card-footer">
                        <div class="card-footer">
                            <div class="row">
                                <div class="col-md-4">
                                    <span class="fw-bold">R$ @p.Valor.ToString("N2")</span>
                                </div>
                                <div class="col-md-6 offset-md-2">
                                    <AuthorizeView>
                                        <Authorized>
                                            <input type="checkbox" class="btn-check right" id="@p.Nome" autocomplete="off" @onchange="() => RemoverDaLista(p.Id)">
                                            <label class="btn btn-outline-secondary" for="@p.Nome">Remover da lista</label>
                                        </Authorized>
                                    </AuthorizeView>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {

    private List<ProdutoListViewModel> produtos;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            produtos = await ProdutoService.ObterProdutosFavoritos();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao carregar produtos: {ex.Message}");
            produtos = new List<ProdutoListViewModel>();
        }
    }

    private async Task RemoverDaLista(Guid produtoId)
    {
        var retornoViewModel = await ProdutoService.RemoverDaLista(produtoId);
        if (!retornoViewModel.Success)
        {
            await JS.InvokeAsync<string>("alert", string.Join("\n", retornoViewModel.Errors));
            return;
        }

        produtos = await ProdutoService.ObterProdutosFavoritos();

        await JS.InvokeAsync<string>("alert", "Produto removido da lista de favorios");
    }

    private string ObterImagemUrl(string imagem)
    {
        return ProdutoService.ObterImagem(imagem);
    }
}